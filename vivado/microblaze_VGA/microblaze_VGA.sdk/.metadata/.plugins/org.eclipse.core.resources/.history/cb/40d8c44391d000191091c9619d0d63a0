#include <stdlib.h>
#include <stdint.h>

#include "HardestGame/game.h"
#include "HardestGame/config.h"

#include "drivers/keyboard.h"
#include "drivers/vga.h"

#include "util/ublaze_util.h"

#define VGA_ADDR (0x44a00000)
#define PLAYER_COLOR (0xF0F)
#define OBSTACLE_COLOR (0x0FF)
#define TRAP_COLOR (0xF00)
#define SAFE_POINT_COLOR (0x0F0)
#define BG_COLOR (0xFFA)

volatile unsigned int * const vga = VGA_ADDR;

int MATH_divide_positive_int(int divident, int divider) {
	int quotient = divident;
	int result = 0;

	while(quotient>=divider) {
		result++;
		quotient -= divider;
	}
	return result;
}

void GAME_draw_map(struct map_field_t **map, const int map_x, const int map_y){
	for(uint16_t y=0; y<map_y; y++){
		for(uint16_t x=0; x<map_x; x++){
			switch(map[y][x].type) {
				case PLAYER:
					VGA_draw_rect(y, x, RECTANGLE_WIDTH, RECTANGLE_HEIGHT, PLAYER_COLOR);
					break;
				case TRAP:
					VGA_draw_rect(y, x, RECTANGLE_WIDTH, RECTANGLE_HEIGHT, TRAP_COLOR);
					break;
				case OBSTACLE:
					VGA_draw_rect(y, x, RECTANGLE_WIDTH, RECTANGLE_HEIGHT, OBSTACLE_COLOR);
					break;
				case SAFE_POINT:
					VGA_draw_rect(y, x, RECTANGLE_WIDTH, RECTANGLE_HEIGHT, SAFE_POINT_COLOR);
					break;
				default:
					break;
			}
		}
	}
}


int main() {
	static struct game_t *game = (struct game_t*)0xDEAD;
	game = game_make();
	int map_x=0, map_y=0;
	enum player_move_t player_move = NONE;

	game->init(game);
	game->update(game, NONE);
	struct map_field_t **map = game->get_map(game, &map_x, &map_y);
	game->update(game, NONE);

	GAME_draw_map(map, map_x, map_y);

	while(1){
		VGA_clean();
		GAME_draw_map(map, map_x, map_y);
		UBLAZE_delay(50);

		if(keyboard_get_state().key_state == PRESSED) {
			switch(keyboard_get_state().key){
				case KEY_W:
					player_move = UP;
					break;
				case KEY_S:
					player_move = DOWN;
					break;
				case KEY_A:
					player_move = LEFT;
					break;
				case KEY_D:
					player_move = RIGHT;
					break;
				default:
					player_move = NONE;
					break;
			}
		} else {
			player_move = NONE;
		}
		game->update(game, player_move);
		UBLAZE_delay(100);
	}
}


