#include <stdlib.h>
#include <stdint.h>
#include "keyboard.h"

#define VGA_ADDR (0x44a00000)
#define PLAYER_COLOR (0xF0F)
#define OBSTACLE_COLOR (0x0FF)
#define TRAP_COLOR (0xF00)
#define SAFE_POINT_COLOR (0x0F0)
#define BG_COLOR (0xFFA)


volatile unsigned int * const vga = VGA_ADDR;
volatile unsigned int * const ps2 = PS2_ADDR;

void UBLAZE_delay(const int ms) {
	for(int i=0; i<ms; i++)
	for(int i=0; i<5000; i++){
		;
	}
}

void VGA_draw(unsigned char x, unsigned char y, uint16_t color) {
	vga[0] = (1<<26) | ((x&0x7F)<<12) | (y&0x7F)<<19 |
			(0xFFF&color);
	vga[0] &= ~(1<<26);
}

void VGA_draw_rect(const uint8_t X, const uint8_t Y, const uint8_t WIDTH, const uint8_t HEIGHT,
		int color){
	for(uint8_t x = X; x<(X+WIDTH); x++) {
		for (uint8_t y = Y; y<(Y+HEIGHT); y++){
			VGA_draw(x, y, color);
		}
	}
}

int MATH_divide_positive_int(int divident, int divider) {
	int quotient = divident;
	int result = 0;

	while(quotient>=divider) {
		result++;
		quotient -= divider;
	}
	return result;
}

void VGA_blink(uint8_t sec){
	unsigned int *vga = VGA_ADDR;
	vga[0] |= (1<<26);
	UBLAZE_delay(sec*1000);
	vga[0] &= ~(1<<26);
	UBLAZE_delay(sec*1000);
}

void VGA_clean() {
	for(int x=0; x<100; x++){
		for(int y=0; y < 75; y++){
			VGA_draw(x, y, BG_COLOR);
		}
	}
}


int main() {

	volatile unsigned int keyboard_content = 0;
	uint8_t rect_x = 10;
	uint8_t rect_y = 10;
//	keyboard_state_t previous_keyboard_state = get_keyboard_state();

	while(1) {
		const keyboard_state_t keyboard_state = get_keyboard_state();

		if(keyboard_state.key_state == PRESSED) {
			switch (keyboard_state.key) {
			case KEY_W:
				rect_y -= 5;
				break;
			case KEY_S:
				rect_y += 5;
				break;
			case KEY_A:
				rect_x -= 5;
				break;
			case KEY_D:
				rect_x += 5;
				break;
			default:
				break;
			}
		}

		VGA_draw_rect(rect_x, rect_y, 10, 10, 0xF00);
		UBLAZE_delay(500);
//		previous_keyboard_state = keyboard_state;
	}
}
